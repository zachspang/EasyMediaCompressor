//TODO: remove unused imports
import {Button, Spinner, StandardButton, VerticalBox, ComboBox, GroupBox, Switch, SpinBox, CheckBox, LineEdit, HorizontalBox,TextEdit, Slider} from "std-widgets.slint";

//Custom Switch, same as builtin switch except the colors
export component ToggleSwitch inherits Rectangle {
    callback toggled;
    in-out property <bool> checked;
    in-out property <bool> enabled <=> touch-area.enabled;
    height: 20px;
    horizontal-stretch: 0;
    vertical-stretch: 0;
    HorizontalLayout {
        spacing: 8px;
        indicator := Rectangle {
            width: 40px;
            border-width: 1px;
            border-radius: root.height / 2;
            border-color: self.background.darker(25%);
            background: root.enabled ? (root.checked ? #0084ff : lightgray) : (root.checked ? #8abceb : lightgray);
            animate background { duration: 50ms; }
            bubble := Rectangle {
                width: root.height - 8px;
                height: bubble.width;
                border-radius: bubble.height / 2;
                y: 4px;
                x: 4px + self.a * (indicator.width - bubble.width - 8px);
                property <float> a: root.checked ? 1 : 0;
                background: root.enabled ? (root.checked ? lightgray : #0084ff) : (root.checked ? lightgray : #8abceb);
                animate a, background {
                    duration: 200ms;
                    easing: ease;
                }
            }
        }
    }

    touch-area := TouchArea {
        width: root.width;
        height: root.height;
        clicked => {
            if (root.enabled) {
                root.checked = !root.checked;
                root.toggled();
            }
        }
    }
}

//Enum for types of Choose File buttons throughout the app
enum ChooseFileButtonType{
    VideoIn,
    VideoOut,
    AudioIn,
    AudioOut,
    ImageIn,
    ImageOut,
}

enum CompressButtonType{
    Video,
    Audio,
    Image
}

export global ButtonLogic {
    callback choose-file-button-pressed(ChooseFileButtonType);
    callback compress-button-pressed(CompressButtonType);
    callback settings-apply();
    callback settings-cancel();
}

component ChooseFile {
    in property <ChooseFileButtonType> type;
    in-out property <bool> enabled <=> ta.enabled;
    Rectangle {
        background: ta.enabled ? (ta.pressed ? #555 : #c0bbbb) : #555;
        animate background { duration: 50ms; }
        height: 25px;
        width: 89px;
        border-width: 2px;
        border-radius: 10px;
        border-color: self.background.darker(20%);
        ta := TouchArea {
            clicked => {
                ButtonLogic.choose-file-button-pressed(root.type);
            }
        }
    }

    Text {
        text: "Choose File";
    }
}

component CompressButton {
    in-out property <bool> enabled <=> ta.enabled;
    in property <CompressButtonType> type;
    Rectangle {
        background: ta.enabled ? (ta.pressed ? #0a470d : #12df2d) : #0a470d;
        animate background { duration: 50ms; }
        height: 25px;
        width: 89px;
        border-width: 2px;
        border-radius: 10px;
        border-color: self.background.darker(20%);
        ta := TouchArea {
            clicked => {
                ButtonLogic.compress-button-pressed(type);
            }
        }
    }

    Text {
        text: "Compress";
    }
}

component SidebarButton inherits Rectangle {
    in-out property <bool> active;
    height: 50px;
    width: 50px;
    callback activate;
    TouchArea {
        clicked => {
            root.activate();
            ButtonLogic.settings-cancel();
        }
    }
}

component SettingsApply {
    in-out property <bool> enabled <=> ta.enabled;
    Rectangle {
        background: ta.enabled ? (ta.pressed ? #555 : #c0bbbb) : #555;
        animate background { duration: 50ms; }
        height: 25px;
        width: 89px;
        border-width: 2px;
        border-radius: 10px;
        border-color: self.background.darker(20%);
        ta := TouchArea {
            clicked => {
                ButtonLogic.settings-apply();
            }
        }
    }

    Text {
        text: "Apply";
    }
}

component SettingsCancel {
    in-out property <bool> enabled <=> ta.enabled;
    Rectangle {
        background: ta.enabled ? (ta.pressed ? #555 : #c0bbbb) : #555;
        animate background { duration: 50ms; }
        height: 25px;
        width: 89px;
        border-width: 2px;
        border-radius: 10px;
        border-color: self.background.darker(20%);
        ta := TouchArea {
            clicked => {
                ButtonLogic.settings-cancel();
            }
        }
    }

    Text {
        text: "Cancel";
    }
}

export component App inherits Window {
    //settings, can only change by hitting apply after changing them in the setting menu
    in-out property <int> default_target_size;
    in-out property <string> default_size_unit: "MB";
    in-out property <bool> overwrite: true;
    //output_name_style = "_Compressed" or "timestamp"
    in-out property <string> output_name_style: "_Compressed";
    in-out property <bool> two_pass_encoding: false;
    //
    //temp values for settings when something is changed but not applied, the are initialized to the stored values
    in-out property <string> temp_default_target_size:default_target_size;
    in-out property <string> temp_default_size_unit:default_size_unit;
    in-out property <bool> temp_overwrite:overwrite;
    in-out property <string> temp_output_name_style:output_name_style;
    in-out property <bool> temp_two_pass_encoding:two_pass_encoding;
    //
    //properties that are given to compress function in main
    in property <string> compress_status;
    in property <bool> widgets-enabled: true;
    in-out property <string> input_path;
    in-out property <string> output_path;
    in-out property <int> target_size: default_target_size;
    in-out property <string> size_unit: default_size_unit;
    //Current active page, 0 = video, 1 = image, 2 = audio, 3 = settings
    out property <int> active_page:0;
    //
    min-width: 480px;
    preferred-width: 480px;
    min-height: 400px;
    preferred-height: 400px;
    title: "EasyMediaCompressor";
    background: #272626;
    GridLayout {
        spacing: 12px;
        padding-right: 40px;
        //Sidebar with buttons to change tabs
        Sidebar := Rectangle {
            background: #555;
            max-width: 59px;
            min-width: 59px;
            min-height: 330px;
            video := SidebarButton {
                y: 10px;
                activate => {
                    root.active_page = 0;
                    input_path = "";
                    output_path = "";
                }
                Image {
                    min-width: 50px;
                    source: @image-url("../../icons/video.svg");
                    colorize: (active_page == 0) ? #706d6d : black;
                }
            }

            image := SidebarButton {
                y: 70px;
                activate => {
                    root.active_page = 1;
                    input_path = "";
                    output_path = "";
                }
                Image {
                    min-width: 50px;
                    source: @image-url("../../icons/audio.svg");
                    colorize: (active_page == 1) ? #706d6d : black;
                }
            }

            audio := SidebarButton {
                y: 130px;
                activate => {
                    root.active_page = 2;
                    input_path = "";
                    output_path = "";
                }
                Image {
                    min-width: 50px;
                    source: @image-url("../../icons/image.svg");
                    colorize: (active_page == 2) ? #706d6d : black;
                }
            }

            settings := SidebarButton {
                y: root.height - 70px;
                activate => {
                    root.active_page = 3;
                }
                Image {
                    min-width: 50px;
                    source: @image-url("../../icons/settings.svg");
                    colorize: (active_page == 3) ? #706d6d : black;
                }
            }
        }

        VideoTab := VerticalLayout {
            alignment: start;
            visible: root.active_page == 0;
            padding-top: 15px;
            spacing: 15px;
            HorizontalLayout {
                padding-top: 0;
                Text {
                    text: "Video";
                    font-size: 20px;
                    color: white;
                }
            }

            //Target Size
            HorizontalLayout {
                Text {
                    color: white;
                    text: "Target File Size: ";
                    font-size: 15px;
                    min-height: 17px;
                }
            }

            HorizontalLayout {
                spacing: 15px;
                LineEdit {
                    enabled: widgets-enabled;
                    min-width: 50px;
                    height: 30px;
                    text: target_size;
                    input-type: number;
                    horizontal-alignment: left;
                    //Keep target size less than 9999, anything else is proably unintentional or should be a different unit
                    edited => {
                        if self.text.to-float() > 9999 {
                            self.text = 9999;
                        }
                        target_size = self.text.to-float();
                    }
                }

                ComboBox {
                    horizontal-stretch: 0;
                    enabled: widgets-enabled;
                    min-width: 70px;
                    height: 30px;
                    current-value: size_unit;
                    model: ["MB", "GB"];
                    selected => {
                        size_unit = self.current-value;
                    }
                }
            }

            //Input
            HorizontalLayout {
                Text {
                    color: white;
                    text: "Input File: ";
                    font-size: 15px;
                    min-height: 17px;
                }
            }

            HorizontalLayout {
                spacing: 30px;
                LineEdit {
                    enabled: widgets-enabled;
                    font-size: 14px;
                    horizontal-alignment: left;
                    min-width: 280px;
                    height: 30px;
                    read-only: true;
                    placeholder-text: input_path;
                }

                ChooseFile {
                    type: ChooseFileButtonType.VideoIn;
                    enabled: widgets-enabled;
                }
            }

            //Output
            HorizontalLayout {
                Text {
                    color: white;
                    text: "Output File Path: ";
                    font-size: 15px;
                    min-height: 17px;
                }
            }

            HorizontalLayout {
                spacing: 30px;
                LineEdit {
                    enabled: widgets-enabled;
                    font-size: 14px;
                    horizontal-alignment: left;
                    min-width: 280px;
                    height: 30px;
                    read-only: true;
                    placeholder-text: output_path;
                }

                ChooseFile {
                    type: ChooseFileButtonType.VideoOut;
                    enabled: widgets-enabled;
                }
            }

            //Compress
            HorizontalLayout {
                spacing: 35px;
                padding-top: 50px;
                //compress_status text
                //TODO: find way to display longer messages
                Text {
                    color: white;
                    text: compress_status;
                    font-size: 15px;
                    height: 50px;
                    min-width: root.width - 300px;
                    wrap: word-wrap;
                    horizontal-alignment: left;
                }

                Spinner {
                    indeterminate: true;
                    visible: !widgets-enabled;
                }

                CompressButton {
                    type: CompressButtonType.Video;
                    enabled: widgets-enabled;
                }
            }
        }

        AudioTab := VerticalLayout {
            col: 1;
            alignment: start;
            visible: root.active_page == 1;
            padding-top: 15px;
            spacing: 15px;
            HorizontalLayout {
                padding-top: 0;
                Text {
                    text: "Audio";
                    font-size: 20px;
                    color: white;
                }
            }

            //Target Size
            HorizontalLayout {
                Text {
                    color: white;
                    text: "Target File Size: ";
                    font-size: 15px;
                    min-height: 17px;
                }
            }

            HorizontalLayout {
                spacing: 15px;
                LineEdit {
                    enabled: widgets-enabled;
                    min-width: 50px;
                    height: 30px;
                    text: target_size;
                    input-type: number;
                    horizontal-alignment: left;
                    //Keep target size less than 9999, anything else is proably unintentional or should be a different unit
                    edited => {
                        if self.text.to-float() > 9999 {
                            self.text = 9999;
                        }
                        target_size = self.text.to-float();
                    }
                }

                ComboBox {
                    horizontal-stretch: 0;
                    enabled: widgets-enabled;
                    min-width: 70px;
                    height: 30px;
                    current-value: size_unit;
                    model: ["MB", "GB"];
                    selected => {
                        size_unit = self.current-value;
                    }
                }
            }

            //Input
            HorizontalLayout {
                Text {
                    color: white;
                    text: "Input File: ";
                    font-size: 15px;
                    min-height: 17px;
                }
            }

            HorizontalLayout {
                spacing: 30px;
                LineEdit {
                    enabled: widgets-enabled;
                    font-size: 14px;
                    horizontal-alignment: left;
                    min-width: 280px;
                    height: 30px;
                    read-only: true;
                    placeholder-text: input_path;
                }

                ChooseFile {
                    type: ChooseFileButtonType.AudioIn;
                    enabled: widgets-enabled;
                }
            }

            //Output
            HorizontalLayout {
                Text {
                    color: white;
                    text: "Output File Path: ";
                    font-size: 15px;
                    min-height: 17px;
                }
            }

            HorizontalLayout {
                spacing: 30px;
                LineEdit {
                    enabled: widgets-enabled;
                    font-size: 14px;
                    horizontal-alignment: left;
                    min-width: 280px;
                    height: 30px;
                    read-only: true;
                    placeholder-text: output_path;
                }

                ChooseFile {
                    type: ChooseFileButtonType.AudioOut;
                    enabled: widgets-enabled;
                }
            }

            //Compress
            HorizontalLayout {
                spacing: 35px;
                padding-top: 50px;
                //compress_status text
                //TODO: find way to display longer messages
                Text {
                    color: white;
                    text: compress_status;
                    font-size: 15px;
                    height: 50px;
                    min-width: root.width - 300px;
                    wrap: word-wrap;
                    horizontal-alignment: left;
                }

                Spinner {
                    indeterminate: true;
                    visible: !widgets-enabled;
                }

                CompressButton {
                    type: CompressButtonType.Audio;
                    enabled: widgets-enabled;
                }
            }
        }

        ImageTab := VerticalLayout {
            col: 1;
            visible: root.active_page == 2;
            padding-top: 15px;
            spacing: 15px;
            HorizontalLayout {
                padding-top: 0;
                Text {
                    text: "Image";
                    font-size: 20px;
                    color: white;
                }
            }
        }

        SettingsTab := VerticalLayout {
            col: 1;
            visible: root.active_page == 3;
            padding-top: 15px;
            spacing: 15px;
            HorizontalLayout {
                padding-top: 0;
                Text {
                    text: "Settings";
                    font-size: 20px;
                    height: 25px;
                    color: white;
                }
            }

            //Default Target Size & Output name style
            HorizontalLayout {
                Text {
                    color: white;
                    text: "Default Target File Size: ";
                    font-size: 15px;
                    height: 17px;
                    defaultTargetSizeTooltip := TouchArea { }

                    Rectangle {
                        width: 300px;
                        x: 10px;
                        y: -12px;
                        background: #5555550f;
                        border-color: #fafafa54;
                        border-width: 2px;
                        Text {
                            color: white;
                            text: "The target size that is set when the app opens";
                        }

                        visible: defaultTargetSizeTooltip.has-hover;
                    }
                }

                Text {
                    color: white;
                    text: "                Output Name Style: ";
                    font-size: 15px;
                    height: 17px;
                    outputNameStyleTooltip := TouchArea { }

                    Rectangle {
                        width: 330px;
                        height: 34px;
                        x: -90px;
                        y: -40px;
                        background: #5555550f;
                        border-color: #fafafa54;
                        border-width: 2px;
                        Text {
                            color: white;
                            text: "What the output file will be named. \nEx: output_Compressed.mp4 or 2024-05-30T13.00.26.mp4";
                        }

                        visible: outputNameStyleTooltip.has-hover;
                    }
                }
            }

            HorizontalLayout {
                spacing: 15px;
                LineEdit {
                    enabled: widgets-enabled;
                    min-width: 50px;
                    //max-width: root.width/3;
                    height: 30px;
                    text <=> temp_default_target_size;
                    input-type: number;
                    horizontal-alignment: left;
                    edited => {
                        if self.text.to-float() > 9999 {
                            self.text = 9999;
                        }
                        temp_default_target_size = self.text.to-float();
                    }
                }

                ComboBox {
                    horizontal-stretch: 0;
                    enabled: widgets-enabled;
                    min-width: 70px;
                    height: 30px;
                    current-value <=> temp_default_size_unit;
                    model: ["MB", "GB"];
                    selected => {
                        temp_default_size_unit = self.current-value;
                    }
                }

                //Rectangle for spacing
                Rectangle {
                    horizontal-stretch: 0;
                    width: 50px;
                }

                ComboBox {
                    //horizontal-stretch: 0;
                    enabled: widgets-enabled;
                    min-width: 140px;
                    height: 30px;
                    current-value <=> temp_output_name_style;
                    model: ["_Compressed", "timestamp"];
                    selected => {
                        temp_output_name_style = self.current-value;
                    }
                }
            }

            //Overwrite
            HorizontalLayout {
                alignment: start;
                Text {
                    color: white;
                    text: " Overwrite output:";
                    font-size: 15px;
                    height: 17px;
                    min-width: 155px;
                    overwriteTooltip := TouchArea { }

                    Rectangle {
                        width: 350px;
                        x: 10px;
                        y: 20px;
                        background: #5555550f;
                        border-color: #fafafa54;
                        border-width: 2px;
                        Text {
                            color: white;
                            text: "If a file exists with same filename as the output overwrite it";
                        }

                        visible: overwriteTooltip.has-hover;
                    }
                }

                //TODO: add bool overwrite as an argument to compress_video, if true pass -y ~~~\\output.mp4 into ffmpeg
                ToggleSwitch {
                    checked <=> temp_overwrite;
                    enabled: widgets-enabled;
                    toggled => {
                        temp_overwrite = self.checked;
                    }
                }
            }

            //Two-Pass Encoding:
            HorizontalLayout {
                alignment: start;
                Text {
                    color: white;
                    text: " Two-Pass Encoding:";
                    font-size: 15px;
                    height: 17px;
                    min-width: 155px;
                    twopassTooltip := TouchArea { }

                    Rectangle {
                        width: 300px;
                        x: 10px;
                        y: 20px;
                        background: #5555550f;
                        border-color: #fafafa54;
                        border-width: 2px;
                        Text {
                            color: white;
                            text: "Slower compression but better quality output";
                        }

                        visible: twopassTooltip.has-hover;
                    }
                }

                ToggleSwitch {
                    checked <=> temp_two_pass_encoding;
                    enabled: widgets-enabled;
                    toggled => {
                        temp_two_pass_encoding = self.checked;
                    }
                }
            }

            //Apply and cancel
            Rectangle {
                SettingsApply {
                    x: root.width - 280px;
                    y: root.height - 250px;
                    enabled: widgets-enabled;
                }

                SettingsCancel {
                    x: root.width - 160px;
                    y: root.height - 250px;
                    enabled: widgets-enabled;
                }
            }
        }
    }
}
